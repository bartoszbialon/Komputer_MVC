// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("Data.Entities.ComputerEntity", b =>
                {
                    b.Property<int>("ComputerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GraphicsCard")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("TEXT")
                        .HasColumnName("Karta graficzna");

                    b.Property<string>("HardDrive")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT")
                        .HasColumnName("Dysk twardy");

                    b.Property<string>("Memory")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("TEXT")
                        .HasColumnName("Pamięć RAM");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("Nazwa komputera");

                    b.Property<string>("Processor")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("TEXT")
                        .HasColumnName("Procesor");

                    b.Property<int>("ProducerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("Data produkcji");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ComputerId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("TypeId");

                    b.ToTable("computers");

                    b.HasData(
                        new
                        {
                            ComputerId = 1,
                            GraphicsCard = "Intel Iris Xe Graphics",
                            HardDrive = "512 GB SSD",
                            Memory = "16 GB DDR4",
                            Name = "Dell XPS 13",
                            Processor = "Intel Core i7",
                            ProducerId = 1,
                            ProductionDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 1
                        },
                        new
                        {
                            ComputerId = 2,
                            GraphicsCard = "NVIDIA GeForce RTX 3060",
                            HardDrive = "1 TB SSD",
                            Memory = "32 GB DDR4",
                            Name = "HP Pavilion Desktop",
                            Processor = "AMD Ryzen 7",
                            ProducerId = 2,
                            ProductionDate = new DateTime(2023, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 2
                        },
                        new
                        {
                            ComputerId = 3,
                            GraphicsCard = "NVIDIA GeForce RTX 3080",
                            HardDrive = "2 TB NVMe SSD",
                            Memory = "64 GB DDR4",
                            Name = "Alienware Aurora R12",
                            Processor = "Intel Core i9",
                            ProducerId = 3,
                            ProductionDate = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 3
                        },
                        new
                        {
                            ComputerId = 4,
                            GraphicsCard = "Intel UHD Graphics 615",
                            HardDrive = "128 GB SSD",
                            Memory = "8 GB RAM",
                            Name = "Google Pixelbook Go",
                            Processor = "Intel Core i5",
                            ProducerId = 4,
                            ProductionDate = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 4
                        },
                        new
                        {
                            ComputerId = 5,
                            GraphicsCard = "Intel Iris Xe Graphics",
                            HardDrive = "1 TB PCIe SSD",
                            Memory = "16 GB LPDDR4X",
                            Name = "Asus ZenBook 14",
                            Processor = "Intel Core i7",
                            ProducerId = 5,
                            ProductionDate = new DateTime(2023, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 5
                        },
                        new
                        {
                            ComputerId = 6,
                            GraphicsCard = "Apple M1 GPU",
                            HardDrive = "512 GB SSD",
                            Memory = "16 GB unified memory",
                            Name = "Apple iMac 27-inch",
                            Processor = "Apple M1",
                            ProducerId = 6,
                            ProductionDate = new DateTime(2023, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = 6
                        });
                });

            modelBuilder.Entity("Data.Entities.ProducerEntity", b =>
                {
                    b.Property<int>("ProducerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FoundationYear")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginCountry")
                        .IsRequired()
                        .HasMaxLength(58)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.HasKey("ProducerId");

                    b.ToTable("Producers");

                    b.HasData(
                        new
                        {
                            ProducerId = 1,
                            City = "Round Rock",
                            Description = "Dell Inc. to amerykańska firma zajmująca się produkcją komputerów, w tym laptopów.",
                            FoundationYear = new DateTime(1984, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dell",
                            OriginCountry = "USA",
                            PostalCode = "78682",
                            Region = "Texas",
                            Street = "One Dell Way"
                        },
                        new
                        {
                            ProducerId = 2,
                            City = "Palo Alto",
                            Description = "HP Inc. to amerykańska firma zajmująca się produkcją sprzętu komputerowego, w tym komputerów stacjonarnych.",
                            FoundationYear = new DateTime(1939, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "HP",
                            OriginCountry = "USA",
                            PostalCode = "94304",
                            Region = "California",
                            Street = "1501 Page Mill Road"
                        },
                        new
                        {
                            ProducerId = 3,
                            City = "Round Rock",
                            Description = "Alienware to marka komputerów do gier i akcesoriów, należąca do Dell Inc.",
                            FoundationYear = new DateTime(1996, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Alienware",
                            OriginCountry = "USA",
                            PostalCode = "78682",
                            Region = "Texas",
                            Street = "One Dell Way"
                        },
                        new
                        {
                            ProducerId = 4,
                            City = "Mountain View",
                            Description = "Google LLC to globalna firma technologiczna, znana m.in. z systemu operacyjnego Chrome OS, który jest używany w Chromebookach.",
                            FoundationYear = new DateTime(1998, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Google",
                            OriginCountry = "USA",
                            PostalCode = "94043",
                            Region = "California",
                            Street = "1600 Amphitheatre Parkway"
                        },
                        new
                        {
                            ProducerId = 5,
                            City = "Beitou District",
                            Description = "AsusTek Computer Inc. to tajwańska firma zajmująca się produkcją sprzętu komputerowego, w tym Ultrabooków.",
                            FoundationYear = new DateTime(1989, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Asus",
                            OriginCountry = "Taiwan",
                            PostalCode = "112",
                            Region = "Taipei",
                            Street = "No. 15, Li-Te Road"
                        },
                        new
                        {
                            ProducerId = 6,
                            City = "Cupertino",
                            Description = "Apple Inc. to amerykańska firma technologiczna, która produkuje m.in. komputery All-In-One, takie jak iMac.",
                            FoundationYear = new DateTime(1976, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple",
                            OriginCountry = "USA",
                            PostalCode = "95014",
                            Region = "California",
                            Street = "1 Apple Park Way"
                        });
                });

            modelBuilder.Entity("Data.Entities.TypeEntity", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TypeId");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            TypeName = "Laptop"
                        },
                        new
                        {
                            TypeId = 2,
                            TypeName = "Komputer stacjonarny"
                        },
                        new
                        {
                            TypeId = 3,
                            TypeName = "Komputer do gier"
                        },
                        new
                        {
                            TypeId = 4,
                            TypeName = "Chromebook"
                        },
                        new
                        {
                            TypeId = 5,
                            TypeName = "Ultrabook"
                        },
                        new
                        {
                            TypeId = 6,
                            TypeName = "All-In-One"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "888df2a7-a91e-48df-a5f2-6dd0904d36d8",
                            ConcurrencyStamp = "888df2a7-a91e-48df-a5f2-6dd0904d36d8",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d4fc2d68-e656-4e9b-8576-6b99dc0b2ed0",
                            ConcurrencyStamp = "d4fc2d68-e656-4e9b-8576-6b99dc0b2ed0",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a1c6e223-d17b-4245-b115-b6c32be19943",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "670d9b04-375a-40ee-ad0c-d7137da782d6",
                            Email = "adam@wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADAM@WSEI.EDU.PL",
                            NormalizedUserName = "ADAM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOtygr8OfL0KbrmRQSazazLINuQqlordvHVcxn/SGliMjjOthbC6LZzlFa1yCGhqfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca9c5950-c545-488f-af53-e84f653ce32f",
                            TwoFactorEnabled = false,
                            UserName = "adam"
                        },
                        new
                        {
                            Id = "1663d74f-4122-4b4d-a27b-5962b66d0c94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c9e9a4c-1934-4fbe-87de-899de5930c69",
                            Email = "jan@microsoft.wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JAN@MICROSOFT.WSEI.EDU.PL",
                            NormalizedUserName = "JAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPh6oH7YkOgqvLVeekgrAToEaf9UfEIXglFkdc5PPWEqq6fyLXbyQDxpEEtImdv00w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2c2dc84-c1aa-4556-a5da-88d67769aab5",
                            TwoFactorEnabled = false,
                            UserName = "jan"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a1c6e223-d17b-4245-b115-b6c32be19943",
                            RoleId = "888df2a7-a91e-48df-a5f2-6dd0904d36d8"
                        },
                        new
                        {
                            UserId = "1663d74f-4122-4b4d-a27b-5962b66d0c94",
                            RoleId = "d4fc2d68-e656-4e9b-8576-6b99dc0b2ed0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entities.ComputerEntity", b =>
                {
                    b.HasOne("Data.Entities.ProducerEntity", "Producer")
                        .WithMany("Computers")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.TypeEntity", "Type")
                        .WithMany("Computers")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.ProducerEntity", b =>
                {
                    b.Navigation("Computers");
                });

            modelBuilder.Entity("Data.Entities.TypeEntity", b =>
                {
                    b.Navigation("Computers");
                });
#pragma warning restore 612, 618
        }
    }
}
